name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json
        
    - name: Install backend dependencies
      run: cd backend && npm ci
      
    - name: Install frontend dependencies
      run: cd frontend && npm ci
      
    - name: Run backend tests
      run: cd backend && npm test
      
    - name: Run frontend tests
      run: cd frontend && npm test -- --coverage --watchAll=false
      
    - name: Build frontend
      run: cd frontend && npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.VPS_SSH_KEY }}
        
    - name: Add VPS to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to VPS
      run: |
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          set -e
          
          echo "🚀 Starting deployment..."
          cd /opt/notionlock
          
          # Pull latest changes
          echo "📥 Pulling latest changes..."
          git pull origin main
          
          # Copy production environment
          echo "🔧 Setting up environment..."
          cp .env_prod .env
          
          # Stop current containers gracefully
          echo "🛑 Stopping current containers..."
          docker compose -f docker/docker-compose.yml down --timeout 30
          
          # Rebuild and start containers
          echo "🔨 Building and starting containers..."
          docker compose -f docker/docker-compose.yml --env-file .env up -d --build
          
          # Wait for containers to be ready
          echo "⏳ Waiting for containers to start..."
          sleep 15
          
          # Check container status
          echo "📊 Container status:"
          docker compose -f docker/docker-compose.yml ps
          
          # Clean up old images
          echo "🧹 Cleaning up old images..."
          docker image prune -f
          
          echo "✅ Deployment completed successfully!"
        EOF
        
    - name: Health Check
      run: |
        echo "🔍 Running health checks..."
        
        # Wait for services to be fully ready
        sleep 30
        
        # Check API health
        echo "Checking API health..."
        for i in {1..5}; do
          if curl -f -s https://api.notionlock.com/api/health > /dev/null; then
            echo "✅ API is healthy"
            break
          else
            echo "⏳ API not ready, attempt $i/5..."
            sleep 10
          fi
        done
        
        # Check frontend
        echo "Checking frontend..."
        for i in {1..5}; do
          if curl -f -s https://notionlock.com > /dev/null; then
            echo "✅ Frontend is responding"
            break
          else
            echo "⏳ Frontend not ready, attempt $i/5..."
            sleep 10
          fi
        done
        
        echo "🎉 All health checks passed!"
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🎉 Deployment successful! 🚀"
          echo "✅ NotionLock is live at https://notionlock.com"
        else
          echo "❌ Deployment failed!"
          exit 1
        fi